"===============================================================================
" Setup
"===============================================================================
" Speed up esc
set timeoutlen=1000
set ttimeoutlen=0

" be IMproved
set nocompatible

" 'required' ???
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.dotfiles/vim/vundle/
call vundle#rc()

" load all vundle plugins
source $HOME/.dotfiles/vim/packages.vim

" make stuff pretty
syntax on

" Be a cool guy
scriptencoding utf-8
set encoding=utf-8

" better nerdtree splits
set splitbelow
set splitright

" set wordwrap on
set wordwrap

" indent git commits
filetype plugin indent on

" Update how vim looks
set background=dark
colorscheme sunburst

" show the cursor position all the time
set ruler

" show line numbers
set number

" draw a line on the same as the cursor position
set cursorline

" enable mouse support
set mouse=a

" display incomplete commands
set showcmd

" set the screen title to the currently opened file
set title

" stop blinking cursors
set gcr=n:blinkon0

" for powerline visiblity
set laststatus=2
set cmdheight=2

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
" Save undo's after file closes
set undofile
" where to save undo histories
set undodir=~/.vim/undo

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

" turn on wrap
set wrap

" Don't wrap lines, ew
" set nowrap

" A tab is 4 spaces
set tabstop=4
set shiftwidth=4

" use spaces, not tabs
set noexpandtab

" Display unprintable chars

" listchar=trail is not as flexible, use the below to highlight trailing
" whitespace. Don't do it for unite windows or readonly files
hi TabLine guibg=none guifg=none
hi TabLineFill guibg=none

highlight ExtraWhitespace ctermbg=none guibg=none
match ExtraWhitespace /\s\+$/
augroup MyAutoCmd
	autocmd BufWinEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
	autocmd InsertEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
	autocmd InsertLeave * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
	autocmd BufWinLeave * if &modifiable && &ft!='unite' | call clearmatches() | endif
augroup END

" Allow backspacing while in insert
set backspace=indent,eol,start

" Set up code folding
set foldmethod=indent
set foldcolumn=2

" Open folds by default
set foldlevel=99

" Improve searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Highlight line 80
set cc=80

" Command line completion
set wildmenu
set wildmode=list:longest,full

" provide some context when editing
set scrolloff=3

" quit NERDTree after opening a file
let g:NERDTreeQuitOnOpen = 0

" I'm getting tired of accidentally holding down the shift key...
" Reissue `w` even if I capitalize it...
com W w
com Q q

" Set rvm ruby path
let g:ruby_path = system('rvm current')

" Add powerline symbol fonts to airline
let g:airline_powerline_fonts = 1

" Sets how many lines of history vim has to remember
set history=10000

" Set to auto read when a file is changed from the outside
set autoread

" Cursor settings. This makes terminal vim sooo much nicer!
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


"===============================================================================
" Normal Mode Shift Key Mappings
"===============================================================================

" U: Redos since 'u' undos
nnoremap U :redo<cr>

" H: Go to beginning of line.
noremap H ^

" L: Go to end of line.
noremap L g_


"===============================================================================
" Leader Key Mappings
"===============================================================================

" Set my leader to be semi-awesome
let mapleader=";"
let maplocalleader=";"

" clear the search buffer when hitting ;return
map <silent> <leader><cr> :nohl<cr>

" toggle last buffer
nnoremap <leader><leader> <c-^>

" toggle syntastic, sometimes I just dont care
nmap <unique> <Leader>s :SyntasticToggleMode<cr>

" Toggle paste mode
nmap <unique> <Leader>p :set paste!<cr>

" NERDTree
nnoremap <leader>n :NERDTreeToggle<cr>

" open .vimrc
nmap <leader>v :tabnew ~/.vimrc <cr>


"===============================================================================
" Normal Mode Ctrl Key Mappings
"===============================================================================

" easier navigation between split windows
nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-l> <c-w>l
nnoremap <c-r> <c-w>r

nnoremap <c-h> :tabp<cr>
nnoremap <c-l> :tabn<cr>



" another way to leave insert mode
map! ;; <c-c>


"===============================================================================
" Insert Mode Ctrl Key Mappings
"===============================================================================

" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A

" Ctrl-a: Go to begin of line
inoremap <c-a> <esc>I


"===============================================================================
" Syntastic
"===============================================================================

let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['scss'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_loc_list=1


"===============================================================================
" Arpeggio
"===============================================================================

" map jk to escape (mashing ftw)
call arpeggio#map('i', '', 0, 'jk', '<Esc>') " jk | esc


"===============================================================================
" NeoComplCache
"===============================================================================

" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 4
let g:neocomplcache_min_keyword_length = 4
" AutoComplPop like behavior.
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_max_list=10

" Enter always performs a literal enter
imap <expr><cr> neocomplcache#smart_close_popup() . "\<CR>"

if has('conceal')
  set conceallevel=2 concealcursor=i
endif


"===============================================================================
" SuperTab
"===============================================================================

" Reverse tabbing direction for autocompletes
let g:SuperTabDefaultCompletionType = "<c-n>"


"===============================================================================
" EasyMotion
"===============================================================================

" Tweak the colors
" hi link EasyMotionTarget WarningMsg
" hi link EasyMotionShade  Comment

" let g:EasyMotion_do_mapping = 0
" nnoremap <silent> <C-f> :call EasyMotion
" nnoremap <silent> <C-t> :call EasyMotion


"===============================================================================
" Unite Setup
"===============================================================================

" Globals ======================================================================

" Start Insert
let g:unite_enable_start_insert = 1
let g:unite_enable_short_source_names = 1

" Enable history yank source
let g:unite_source_history_yank_enable = 1

" Open in bottom right
let g:unite_split_rule = "botright"

" Shorten the default update date of 500ms
let g:unite_update_time = 100

" set up mru limit
let g:unite_source_file_mru_limit = 1000

" highlight like my vim
let g:unite_cursor_line_highlight = 'CursorLine'

" format mru
let g:unite_source_file_mru_filename_format = ':~:.'
let g:unite_source_file_mru_time_format = ''

" set up coolguy arrow prompt
let g:unite_prompt = '→ '

" Use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])

" Use the rank sorter for everything
call unite#filters#sorter_default#use(['sorter_rank'])

" Set up some custom ignores
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ 'git5/.*/review/',
      \ 'google/obj/',
      \ 'tmp/',
      \ 'node_modules/',
      \ '.sass-cache',
      \ ], '\|'))


" <F1>: Help

" Unite Commands ===============================================================

" No prefix for unite, leader that bish
nnoremap [unite] <Nop>

" ;f Fuzzy Find Everything
" Buffers, recently used, recursive async file search
nnoremap <silent> <leader>f :<C-u>Unite
      \ -buffer-name=files buffer file_mru file_rec/async<CR>

" ;y Yank history
nnoremap <silent> <leader>y :<C-u>Unite -buffer-name=yanks history/yank<CR>

" ;o Quick outline, see an overview of this file
nnoremap <silent> <leader>o :<C-u>Unite -buffer-name=outline -vertical outline<CR>

" ;u Unite Sources
nnoremap <silent> <leader>u :<C-u>Unite -buffer-name=sources source<CR>

" ;d Switch project directory
nnoremap <silent> <Leader>d
      \ :<C-u>Unite -buffer-name=change-cwd -default-action=lcd directory_mru<CR>

" Quick find using the word under cursor
nnoremap <silent> [unite]l :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>

" ;m MRU All Vim buffers, not file buffer
nnoremap <silent> <leader>m :<C-u>Unite -buffer-name=mru file_mru<CR>

" ;c Quick commands, lists all available vim commands
nnoremap <silent> <leader>c :<C-u>Unite -buffer-name=commands command<CR>

" Custom Unite settings
autocmd MyAutoCmd FileType unite call s:unite_settings()
function! s:unite_settings()

  " exit with esc
  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <ESC> <Plug>(unite_exit)

  " Ctrl jk mappings
  imap <buffer> <c-j> <Plug>(unite_insert_leave)
  nmap <buffer> <c-j> <Plug>(unite_loop_cursor_down)
  nmap <buffer> <c-k> <Plug>(unite_loop_cursor_up)

  " jj becuase you're lazy, and leave insert mode
  imap <buffer> jj <Plug>(unite_insert_leave)

  " qq becuase you're lazy, and quit unite
  imap <buffer> qq <Plug>(unite_exit)

  " refresh unite
  nmap <buffer> <C-r> <Plug>(unite_redraw)
  imap <buffer> <C-r> <Plug>(unite_redraw)

  " split control
  inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  nnoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

endfunction


"===============================================================================
" Unite Sessions
"===============================================================================

" Save session automatically.
let g:unite_source_session_enable_auto_save = 1

