# tmux
alias tm="tmux -2"
alias tma="tmux attach $1"
alias tmn="tmux new -s $1"
alias tman="tmux a -t $1"
alias tmkn="tmux kill-session -t $1"
alias tmls="tmux ls"
alias tmk="tmux kill-server"

# system
alias nah="cd -"
alias sudo="sudo "
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
alias crontab="export EDITOR=vim && crontab"
alias art='php artisan'
alias cdump='composer dumpautoload -o'
alias hosts="sudo subl /etc/hosts"
alias phpunit="phpunit --colors --testdox"
alias pu="phpunit"
alias cat="ccat"
alias rmt="rmtrash"
alias sl="subl $1"
alias systemup="brew update && brew upgrade && brew cleanup && brew prune && /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder && sudo gem update --system && sudo gem up && sudo rm -f /private/var/log/asl/*.asl && sudo purge"
alias permrepair="sudo /usr/libexec/repair_packages --repair --standard-pkgs --volume /"
alias rf='source ~/.bash_profile'
alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard.'"
alias profile='subl ~/.bash_profile'
alias gemup='sudo gem update --system && sudo gem up'
alias brewup='brew update && brew upgrade && brew cleanup && brew prune'
alias brewdoc='brew doctor'
alias osxup='sudo softwareupdate -i -a'
alias slowon='sudo ipfw pipe 1 config bw 50KByte/s && sudo ipfw add 1 pipe 1 src-port 80'
alias slowoff='sudo ipfw delete 1'
alias ff="open -a firefox $*"
alias c="clear"
alias ping="ping -c 5"
alias grep="grep --color=auto"
alias stfu="osascript -e 'set volume output muted true'"
alias yell="osascript -e 'set Volume 10'"
alias wanip="curl ipecho.net/plain; echo"
alias lanip="ipconfig getifaddr en0"
alias ka="killall"
alias q='exit'
alias f='open .'
alias fuck='sudo $(history -p \!\!)'
alias startvpn="ssh -fqCND 9999 root@192.227.143.138"
alias pywebserver='python -m SimpleHTTPServer 8000'
alias rubywebserver="ruby -run -e httpd . -p 8000"
alias ydl="youtube-dl"
alias ydlb="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4"
alias flushdns='dscacheutil -flushcache'
alias terminalogs="sudo rm -f /private/var/log/asl/*.asl"
alias ftm="whatmp3 --320 -c "`pwd`""

# screen
alias sscreen="screen -dmS $1 $2"
alias rscreen="screen -r $1"

# list things
alias la="ls -la"
alias lsl="ls -l"
alias ls="ls -GpFh"
alias lsh='ls -lh'
alias lsm='ls -tho'
alias ps?="ps aux | grep"

# change dir
alias ~="cd ~"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# git standup
alias gsua='git log --all --since="9:30am yesterday" --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=format:"%Y-%m-%d %H:%M:%S"'
alias gsu='git log --all --author=$USER --since="9:30am yesterday" --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=format:"%Y-%m-%d %H:%M:%S"'

# git patch
alias gps="git --no-pager diff --no-color > $1"
alias gpa="git apply $1"

# git rebase
alias grid='git rebase -i develop'
alias gr--c='git rebase --continue'
alias gr--a='git rebase --abort'
alias gr--s='git rebase --skip'

# git checkout dev/master
alias gupd='git checkout develop && git fetch --all && git pull --rebase --prune && git log -1 --pretty=%B'
alias gupm='git checkout master && git fetch --all && git pull --rebase --prune && git log -1 --pretty=%B'

# git pull
alias gpr="git fetch --all && git pull --rebase --prune && git log -1 --pretty=%B"


function repeat()
{
    for ((n=0;n<$1;n++)); do
        $2
     done
}

# git hubflow
function gfs()
{
    CONVERT=$(echo $1 | tr -s ' ' | tr ' ' '_')
    toilet -f term -F border --gay "Creating branch feature/$CONVERT!"
    if [[ -z $(git status -s) ]]
    then
        git checkout -b feature/$CONVERT
        git push -u origin feature/$CONVERT
    else
        git status
        echo "[rejected] Tree has changes, please clear tree and try again."
        # git status -sb
    fi
}

function gfc()
{
    toilet -f term -F border --gay "Force deleting branch $1!"
    if [[ -z $(git status -s) ]]
    then
        git push -d origin $1
        git branch -d $1
    else
        git status
        echo "[rejected] Tree has changes, please clear tree and try again."
    fi
}

function gcbl()
{
    CURRENT=$(gcbn)
    echo "${CURRENT}"
    git cherry -v develop ${CURRENT}
}

alias gnah="git reset --hard && git clean -df"
function gwip()
{
    toilet -f term -F border --gay "Pushing work in progress branch!"
    git add -A && git commit -m "work in progress" && git push
}

function gwipp()
{
    toilet -f term -F border --gay 'Force pushing work in progress branch!'
    git add -A && git commit -m "work in progress" && git push --force
}

alias guc="git reset --soft HEAD^"
alias gus="git reset"

# git log
alias gla='git log --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=format:"%Y-%m-%d %H:%M:%S"'
alias gl5='git log -n 5 --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=format:"%Y-%m-%d %H:%M:%S"'
alias gl10='git log -n 10 --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=format:"%Y-%m-%d %H:%M:%S"'

# git stash
alias gss="git stash save $1"
alias gsl="git stash list"
alias gsa='git apply'
alias gsa#='git apply stash@{$1}'
alias gsd='git stash drop'
alias gsp='git stash pop'

# git reflog
alias grl='git reflog --date=iso'

# git diff
alias gdf="git diff"
alias gdfs="git diff --staged"
alias gdfh="git diff HEAD"
alias gs='git status'
alias gr="git reset"

# fun git stuff
alias glb="git shortlog -sn"

# phpunit
alias puf="phpunit --filter"
alias puts="phpunit --testsuite"

# git log see what everyone's been upto
alias glrmt="git log --since=00:00:00 --all --no-merges --oneline --author=$USER"
alias glrm="git log --all --oneline --no-merges --author=$USER"
alias glr="git log --all --oneline --no-merges"
function gl {
    git log -n $1 --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=format:"%Y-%m-%d %H:%M:%S";
}

# git clean
function gcdf {
    ORANGE="\033[38;5;214m"
    DEFAULT="\033[0m"

    echo -e "${ORANGE}git clean -df - HOLD UP! YOU SURE ABOUT THIS!?!? (y/n)${DEFAULT}"
    read response
    if echo "$response" | grep -iq "^y" ;
    then
        git clean -df
    fi
}

# git checkout
function gco {
    ORANGE="\033[38;5;214m"
    DEFAULT="\033[0m"

    if [[ $1 = '.' ]];
    then
        echo -e "${ORANGE}git checkout . - HOLD UP! YOU SURE ABOUT THIS!?!? (y/n)${DEFAULT}"
        read response
        if echo "$response" | grep -iq "^y" ;
        then
            git checkout \.
        else
            return
        fi
    fi

    git checkout $1
}

# squash commits
function squash {
    # git rebase --interactive HEAD~$1
    git reset --soft HEAD~$1 &&
    git commit --amend
}

# deploy
function dep {
    ansible-playbook deploy.yml -l $1 -e branch=$2 -v
}

# copy current branch name and pipe it to the clipboard
alias gcbps="gcbn | cut -d _ -f 1 | sed 's/.*[/]//g' && gcbn | cut -d _ -f 1 | sed 's/.*[/]//g' | pbcopy"
function gcbn { command $(git symbolic-ref --short HEAD | pbcopy) && echo $(pbpaste)  ;}
function gcbsn { command $(git symbolic-ref --short HEAD | awk -F'feature/' '{print $2}' | pbcopy) && echo $(pbpaste) ;}

# git branch
# alias gb="git branch"
alias gb="git for-each-ref --sort=committerdate refs/heads/ --format='%(color: yellow)%(committerdate:short) %(color: white)%(refname:short)'"
# alias gbr="git branch -r"
alias gbr="git for-each-ref --sort=committerdate refs/remotes/ --format='%(color: yellow)%(committerdate:short) %(color: white)%(refname:short)'"

# git add
alias ga.="git add --all && git status"
alias gap="git add -p && git status"
alias gau="git add -u && git status"
function ga { git add "$*";  git status;}

# git push
alias gpo="git push origin $1"
function gpof {
    toilet -f term -F border --gay "Force pushing branch $1"

    if [[ -z $(git status -s) ]]
    then
        git push origin +"$@" ;
    else
        git status
        echo "[rejected] Tree has changes, please clear tree and try again."
    fi
}

# git reset
alias grh="git reset --hard $1"
function grho { git reset --hard origin/"$@" ;}

# git commit
alias gcav='git commit -av'
alias gca='git commit --amend'
function gcm { git commit -m "$1";}
function gcam { git commit -am "$1";}

# weather
alias wetter='curl -4 wttr.in/Toronto'
alias wttr='curl -s wttr.in/Toronto | head -7 | tail -5'

# vagrant
alias vagrant='cd ~/vagrant && vagrant'

# convert unix timestamp to utc
function cet () {
    if [[ $1 = '-u' && $2 ]];
    then
        # return utc time
        echo $2
        date -u -r $2 +"%B %d, %Y. %r %Z"
    else
        # return edt time
        echo $1
        date -r $1 +"%B %d, %Y. %r %Z"
    fi
}

# backup a file
function backup() { cp "$1"{,.bak};}

# cd into dir and list
function cdl { cd "$@" && ls -la; }

function pn() {
    echo -e "\033]50;SetProfile=$@\a"
}

# functions (most used commands from history)
function htop {
  history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head
}

# credit: http://nparikh.org/notes/zshrc.txt
# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# open current git repo in github
function gitweb {
    if [ -d .git ]; then
        remotes=$(git remote -v | awk -F'git@github.com:' '{print $2}' | cut -d" " -f1)
        if [ -z "$remotes" ];
        then
            remotes=$(git remote -v | awk -F'https://github.com/' '{print $2}' | cut -d" " -f1)
        fi

        remote_url=$(echo $remotes | cut -d" " -f1)
        url="https://github.com/"
        url="${url}${remote_url}"
        open $url
    else
      echo "Not a git repo"
    fi;
}

# open current finder path in terminal
function cf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"
    else
        echo 'No Finder window found' >&2
    fi
}

# create a folder and cd into it
function entdir {
    mkdir $1
    cd $1
}

function colourgrid()
{
    iter=16
    while [ $iter -lt 52 ]
    do
        second=$[$iter+36]
        third=$[$second+36]
        four=$[$third+36]
        five=$[$four+36]
        six=$[$five+36]
        seven=$[$six+36]
        if [ $seven -gt 250 ];then seven=$[$seven-251]; fi

        echo -en "\033[38;5;$(echo $iter)m█ "
        printf "%03d" $iter
        echo -en "   \033[38;5;$(echo $second)m█ "
        printf "%03d" $second
        echo -en "   \033[38;5;$(echo $third)m█ "
        printf "%03d" $third
        echo -en "   \033[38;5;$(echo $four)m█ "
        printf "%03d" $four
        echo -en "   \033[38;5;$(echo $five)m█ "
        printf "%03d" $five
        echo -en "   \033[38;5;$(echo $six)m█ "
        printf "%03d" $six
        echo -en "   \033[38;5;$(echo $seven)m█ "
        printf "%03d" $seven

        iter=$[$iter+1]
        printf '\r\n'
    done
}

function rfdb() {
    mysql -h 192.168.33.10 -u root -proot -e "DROP DATABASE rivalry"
    mysql -h 192.168.33.10 -u root -proot -e "CREATE DATABASE rivalry"
    mysql -h 192.168.33.10 -u root -proot $1 < $2
}

function lsp {
    for f in $(ls -a); do stat -f "%A %N" $f; done;
}

function gcgrep() {
    BRANCHES=`git branch -l --no-color | tr -d '*' | awk '{print $1}' | grep -e $1 | wc -l`
    COUNT=${BRANCHES//[[:blank:]]/}
    BRANCH=`git branch -l --no-color | tr -d '*' | awk '{print $1}' | grep -e $1`
    if [ "$COUNT" == "1" ]; then
        echo `git checkout "$BRANCH"`
    else
        echo $COUNT branches match the pattern "\"$1\""
        git branch -l | grep -e $1
    fi
}
